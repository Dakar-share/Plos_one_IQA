# -*- coding: utf-8 -*-
import os    
os.environ['THEANO_FLAGS'] = "device=gpu0,floatX=float32" #optimizer=None,exception_verbosity=high"
import theano
from keras.models import Sequential
from keras.optimizers import SGD
from keras.optimizers import Adam
from keras.utils import np_utils
from keras.models import model_from_json
from keras.models import Model
from keras.layers import Input, Dense, Convolution2D, MaxPooling2D, AveragePooling2D, ZeroPadding2D, Dropout, Flatten, merge, Reshape, Activation
from keras.layers.advanced_activations import LeakyReLU, PReLU
from keras.layers.normalization import BatchNormalization
from keras import regularizers
from keras import backend as K
from keras.preprocessing import image
import time
from keras.utils.visualize_util import plot
import cPickle

from keras.layers.core import Layer
import theano.tensor as T
from keras.regularizers import l2
from sklearn.metrics import log_loss, accuracy_score, roc_auc_score
import numpy as np
import hickle as hkl
from keras.utils.np_utils import to_categorical
from keras.callbacks import ModelCheckpoint
def load_data():
  """
  Load dataset and split data into training and validation sets
  """
  #-------train part------
  X_train=np.load('data/train/train_image.npy')#(number，3,32,32)
  #-------test part-------
  X_test=np.load('data/test/test_image.npy')#(number，3,32,32)
  #---------train_labels-----
  Y_train=np.load('data/labels/train_label_patch.npy')
  #---------valid_labels-----
  Y_test=np.load('data/labels/test_label_patch.npy')
  print 'X_train.shape: ',X_train.shape
  print 'X_test.shape: ',X_test.shape
  return (X_train,X_test,Y_train,Y_test)

class Chaos_activation(Layer):
    """
    Custom Layer for Local Response Normalization (LRN)
    """

    def __init__(self,**kwargs):
        super(Chaos_activation, self).__init__(**kwargs)   
        self.x_pre=0.6
    def call(self, u, mask=None):
        self.x_pre = u*self.x_pre*(1-self.x_pre)
        return  self.x_pre
    def get_config(self):    
        base_config = super(Chaos_activation, self).get_config()
        return dict(list(base_config.items()))



class Rollback_data(Layer):


    def __init__(self,**kwargs):
        super(Rollback_data, self).__init__(**kwargs)
    
    def call(self, x, mask=None):
        input_sqr = -x
        return  input_sqr
    def get_config(self):    
        base_config = super(Rollback_data, self).get_config()
        return dict(list(base_config.items()))

def CNN_model(img_rows, img_cols, channel=3, num_class=None):

    input = Input(shape=(channel, img_rows, img_cols))
    conv1_7x7= Convolution2D(16,7,7,name='conv1/7x7',activation='relu')(input)#,W_regularizer=l2(0.0002) border_mode='same',init='normal', 
    pool2_26x26= MaxPooling2D(pool_size=(2,2),strides=(1,1),border_mode='valid',name='pool2')(conv1_7x7)
    poll_flat = Flatten()(pool2_26x26)

    #MLP
    fc_1 = Dense(200,name='fc_1',activation='relu')(poll_flat)#,W_regularizer=l2(0.0002) 
    drop_fc = Dropout(0.5)(fc_1)
    out = Dense(1,name='fc_2',activation='sigmoid')(drop_fc)#,W_regularizer=l2(0.0002)
    #fc_2=Chaos_activation(name='chaos_neure_2')(fc_2_)



    # Create model
    model = Model(input=input, output=out)
    
    # Load ImageNet pre-trained data 
    #model.load_weights('models/googlenet_weights.h5')  #NOTE this one

    sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
    model.compile(optimizer=sgd, loss='mean_absolute_error', metrics=['accuracy'])  
    return model 
if __name__ =='__main__':
  batch_size=100
  nb_epoch = 200
  # TODO: Load training and validation sets
  X_train, X_test, Y_train, Y_test = load_data()
  model = CNN_model(16, 16, 3)
  plot(model, to_file='model.png')
  checkpointer=ModelCheckpoint(filepath='models/weights.h5',monitor='val_loss',verbose=1,save_best_only=True)

  start_time = time.clock()
  model.fit(X_train,Y_train,
              batch_size=batch_size,
              nb_epoch=nb_epoch,
              shuffle=True,
              verbose=1,
              callbacks=[checkpointer],
              validation_split=0.2
              )
  end_time = time.clock()
  
  print 'train time is: ',(end_time-start_time)
  print 'load best weight.......'
  model.load_weights('models/weights.h5')
  cPickle.dump(model,open("./models/model.pkl","wb"))#save best model+weight
  #if other code want use this final model run: model = cPickle.load(open("model.pkl","rb"))
  start_time = time.clock()
  print "make predictions....... "
  predictions_test = model.predict(X_test, batch_size=batch_size, verbose=1)
  end_time = time.clock()
  print 'test time is: ',(end_time-start_time)
  np.save('predictions_test.npy',predictions_test)
  '''
  print 'extract cnn fc_2 feature.....'
  get_feature = theano.function([model.layers[0].input],model.layers[3].output,allow_input_downcast=False)
  feature = get_feature(X_train)#run theano.function
  np.save('cnn_train_featrue.npy',feature)
 
  feature = get_feature(X_test)#run theano.function
  np.save('cnn_test_featrue.npy',feature)
  '''
  print "Done...."
